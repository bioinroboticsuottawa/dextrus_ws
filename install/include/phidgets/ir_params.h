// Generated by gencpp from file phidgets/ir_params.msg
// DO NOT EDIT!


#ifndef PHIDGETS_MESSAGE_IR_PARAMS_H
#define PHIDGETS_MESSAGE_IR_PARAMS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace phidgets
{
template <class ContainerAllocator>
struct ir_params_
{
  typedef ir_params_<ContainerAllocator> Type;

  ir_params_()
    : header()
    , code()
    , data()
    , bitcount(0)
    , head()
    , zero()
    , one()
    , trail(0)
    , gap(0)
    , repeat()
    , duty_cycle(0)
    , carrier_frequency(0)  {
    }
  ir_params_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , code(_alloc)
    , data(_alloc)
    , bitcount(0)
    , head(_alloc)
    , zero(_alloc)
    , one(_alloc)
    , trail(0)
    , gap(0)
    , repeat(_alloc)
    , duty_cycle(0)
    , carrier_frequency(0)  {
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _code_type;
  _code_type code;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _data_type;
  _data_type data;

   typedef int8_t _bitcount_type;
  _bitcount_type bitcount;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _head_type;
  _head_type head;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _zero_type;
  _zero_type zero;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _one_type;
  _one_type one;

   typedef int32_t _trail_type;
  _trail_type trail;

   typedef int32_t _gap_type;
  _gap_type gap;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _repeat_type;
  _repeat_type repeat;

   typedef int32_t _duty_cycle_type;
  _duty_cycle_type duty_cycle;

   typedef int32_t _carrier_frequency_type;
  _carrier_frequency_type carrier_frequency;




  typedef boost::shared_ptr< ::phidgets::ir_params_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::phidgets::ir_params_<ContainerAllocator> const> ConstPtr;

}; // struct ir_params_

typedef ::phidgets::ir_params_<std::allocator<void> > ir_params;

typedef boost::shared_ptr< ::phidgets::ir_params > ir_paramsPtr;
typedef boost::shared_ptr< ::phidgets::ir_params const> ir_paramsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::phidgets::ir_params_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::phidgets::ir_params_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace phidgets

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/indigo/share/nav_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'move_base_msgs': ['/opt/ros/indigo/share/move_base_msgs/cmake/../msg'], 'phidgets': ['/home/jayme/workspace/dextrus_ws/src/phidgets/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::phidgets::ir_params_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::phidgets::ir_params_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::phidgets::ir_params_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::phidgets::ir_params_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::phidgets::ir_params_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::phidgets::ir_params_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::phidgets::ir_params_<ContainerAllocator> >
{
  static const char* value()
  {
    return "955e697570ed23be5d28fb465bf82c22";
  }

  static const char* value(const ::phidgets::ir_params_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x955e697570ed23beULL;
  static const uint64_t static_value2 = 0x5d28fb465bf82c22ULL;
};

template<class ContainerAllocator>
struct DataType< ::phidgets::ir_params_<ContainerAllocator> >
{
  static const char* value()
  {
    return "phidgets/ir_params";
  }

  static const char* value(const ::phidgets::ir_params_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::phidgets::ir_params_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
int32[] code\n\
int32[] data\n\
byte bitcount\n\
int32[] head\n\
int32[] zero\n\
int32[] one\n\
int32 trail\n\
int32 gap\n\
int32[] repeat\n\
int32 duty_cycle\n\
int32 carrier_frequency\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::phidgets::ir_params_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::phidgets::ir_params_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.code);
      stream.next(m.data);
      stream.next(m.bitcount);
      stream.next(m.head);
      stream.next(m.zero);
      stream.next(m.one);
      stream.next(m.trail);
      stream.next(m.gap);
      stream.next(m.repeat);
      stream.next(m.duty_cycle);
      stream.next(m.carrier_frequency);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct ir_params_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::phidgets::ir_params_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::phidgets::ir_params_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "code[]" << std::endl;
    for (size_t i = 0; i < v.code.size(); ++i)
    {
      s << indent << "  code[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.code[i]);
    }
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.data[i]);
    }
    s << indent << "bitcount: ";
    Printer<int8_t>::stream(s, indent + "  ", v.bitcount);
    s << indent << "head[]" << std::endl;
    for (size_t i = 0; i < v.head.size(); ++i)
    {
      s << indent << "  head[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.head[i]);
    }
    s << indent << "zero[]" << std::endl;
    for (size_t i = 0; i < v.zero.size(); ++i)
    {
      s << indent << "  zero[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.zero[i]);
    }
    s << indent << "one[]" << std::endl;
    for (size_t i = 0; i < v.one.size(); ++i)
    {
      s << indent << "  one[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.one[i]);
    }
    s << indent << "trail: ";
    Printer<int32_t>::stream(s, indent + "  ", v.trail);
    s << indent << "gap: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gap);
    s << indent << "repeat[]" << std::endl;
    for (size_t i = 0; i < v.repeat.size(); ++i)
    {
      s << indent << "  repeat[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.repeat[i]);
    }
    s << indent << "duty_cycle: ";
    Printer<int32_t>::stream(s, indent + "  ", v.duty_cycle);
    s << indent << "carrier_frequency: ";
    Printer<int32_t>::stream(s, indent + "  ", v.carrier_frequency);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PHIDGETS_MESSAGE_IR_PARAMS_H
