// Generated by gencpp from file phidgets/lidar_controlRequest.msg
// DO NOT EDIT!


#ifndef PHIDGETS_MESSAGE_LIDAR_CONTROLREQUEST_H
#define PHIDGETS_MESSAGE_LIDAR_CONTROLREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace phidgets
{
template <class ContainerAllocator>
struct lidar_controlRequest_
{
  typedef lidar_controlRequest_<ContainerAllocator> Type;

  lidar_controlRequest_()
    : pause(false)
    , pan_servo_index(0)
    , tilt_servo_index(0)
    , sensor_index(0)
    , no_of_sensors(0)
    , sensor_type()
    , sensor_coupling()
    , speed(0.0)
    , acceleration(0.0)
    , pan_position_left(0.0)
    , pan_position_right(0.0)
    , pan_position_left_angle_degrees(0.0)
    , pan_position_right_angle_degrees(0.0)
    , tilt_position_up(0.0)
    , tilt_position_down(0.0)
    , tilt_position_up_angle_degrees(0.0)
    , tilt_position_down_angle_degrees(0.0)
    , tilt_steps(0)
    , cycle_time_sec(0.0)  {
    }
  lidar_controlRequest_(const ContainerAllocator& _alloc)
    : pause(false)
    , pan_servo_index(0)
    , tilt_servo_index(0)
    , sensor_index(0)
    , no_of_sensors(0)
    , sensor_type(_alloc)
    , sensor_coupling(_alloc)
    , speed(0.0)
    , acceleration(0.0)
    , pan_position_left(0.0)
    , pan_position_right(0.0)
    , pan_position_left_angle_degrees(0.0)
    , pan_position_right_angle_degrees(0.0)
    , tilt_position_up(0.0)
    , tilt_position_down(0.0)
    , tilt_position_up_angle_degrees(0.0)
    , tilt_position_down_angle_degrees(0.0)
    , tilt_steps(0)
    , cycle_time_sec(0.0)  {
    }



   typedef uint8_t _pause_type;
  _pause_type pause;

   typedef int32_t _pan_servo_index_type;
  _pan_servo_index_type pan_servo_index;

   typedef int32_t _tilt_servo_index_type;
  _tilt_servo_index_type tilt_servo_index;

   typedef int32_t _sensor_index_type;
  _sensor_index_type sensor_index;

   typedef int32_t _no_of_sensors_type;
  _no_of_sensors_type no_of_sensors;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _sensor_type_type;
  _sensor_type_type sensor_type;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _sensor_coupling_type;
  _sensor_coupling_type sensor_coupling;

   typedef float _speed_type;
  _speed_type speed;

   typedef float _acceleration_type;
  _acceleration_type acceleration;

   typedef float _pan_position_left_type;
  _pan_position_left_type pan_position_left;

   typedef float _pan_position_right_type;
  _pan_position_right_type pan_position_right;

   typedef float _pan_position_left_angle_degrees_type;
  _pan_position_left_angle_degrees_type pan_position_left_angle_degrees;

   typedef float _pan_position_right_angle_degrees_type;
  _pan_position_right_angle_degrees_type pan_position_right_angle_degrees;

   typedef float _tilt_position_up_type;
  _tilt_position_up_type tilt_position_up;

   typedef float _tilt_position_down_type;
  _tilt_position_down_type tilt_position_down;

   typedef float _tilt_position_up_angle_degrees_type;
  _tilt_position_up_angle_degrees_type tilt_position_up_angle_degrees;

   typedef float _tilt_position_down_angle_degrees_type;
  _tilt_position_down_angle_degrees_type tilt_position_down_angle_degrees;

   typedef int32_t _tilt_steps_type;
  _tilt_steps_type tilt_steps;

   typedef float _cycle_time_sec_type;
  _cycle_time_sec_type cycle_time_sec;




  typedef boost::shared_ptr< ::phidgets::lidar_controlRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::phidgets::lidar_controlRequest_<ContainerAllocator> const> ConstPtr;

}; // struct lidar_controlRequest_

typedef ::phidgets::lidar_controlRequest_<std::allocator<void> > lidar_controlRequest;

typedef boost::shared_ptr< ::phidgets::lidar_controlRequest > lidar_controlRequestPtr;
typedef boost::shared_ptr< ::phidgets::lidar_controlRequest const> lidar_controlRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::phidgets::lidar_controlRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::phidgets::lidar_controlRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace phidgets

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/indigo/share/nav_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'move_base_msgs': ['/opt/ros/indigo/share/move_base_msgs/cmake/../msg'], 'phidgets': ['/home/jayme/workspace/dextrus_ws/src/phidgets/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::phidgets::lidar_controlRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::phidgets::lidar_controlRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::phidgets::lidar_controlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::phidgets::lidar_controlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::phidgets::lidar_controlRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::phidgets::lidar_controlRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::phidgets::lidar_controlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acbedaa0dacc8068c8686729472cbefb";
  }

  static const char* value(const ::phidgets::lidar_controlRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xacbedaa0dacc8068ULL;
  static const uint64_t static_value2 = 0xc8686729472cbefbULL;
};

template<class ContainerAllocator>
struct DataType< ::phidgets::lidar_controlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "phidgets/lidar_controlRequest";
  }

  static const char* value(const ::phidgets::lidar_controlRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::phidgets::lidar_controlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool pause\n\
int32 pan_servo_index\n\
int32 tilt_servo_index\n\
int32 sensor_index\n\
int32 no_of_sensors\n\
int32[] sensor_type\n\
int32[] sensor_coupling\n\
float32 speed\n\
float32 acceleration\n\
float32 pan_position_left\n\
float32 pan_position_right\n\
float32 pan_position_left_angle_degrees\n\
float32 pan_position_right_angle_degrees\n\
float32 tilt_position_up\n\
float32 tilt_position_down\n\
float32 tilt_position_up_angle_degrees\n\
float32 tilt_position_down_angle_degrees\n\
int32 tilt_steps\n\
float32 cycle_time_sec\n\
";
  }

  static const char* value(const ::phidgets::lidar_controlRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::phidgets::lidar_controlRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pause);
      stream.next(m.pan_servo_index);
      stream.next(m.tilt_servo_index);
      stream.next(m.sensor_index);
      stream.next(m.no_of_sensors);
      stream.next(m.sensor_type);
      stream.next(m.sensor_coupling);
      stream.next(m.speed);
      stream.next(m.acceleration);
      stream.next(m.pan_position_left);
      stream.next(m.pan_position_right);
      stream.next(m.pan_position_left_angle_degrees);
      stream.next(m.pan_position_right_angle_degrees);
      stream.next(m.tilt_position_up);
      stream.next(m.tilt_position_down);
      stream.next(m.tilt_position_up_angle_degrees);
      stream.next(m.tilt_position_down_angle_degrees);
      stream.next(m.tilt_steps);
      stream.next(m.cycle_time_sec);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct lidar_controlRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::phidgets::lidar_controlRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::phidgets::lidar_controlRequest_<ContainerAllocator>& v)
  {
    s << indent << "pause: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pause);
    s << indent << "pan_servo_index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pan_servo_index);
    s << indent << "tilt_servo_index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tilt_servo_index);
    s << indent << "sensor_index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sensor_index);
    s << indent << "no_of_sensors: ";
    Printer<int32_t>::stream(s, indent + "  ", v.no_of_sensors);
    s << indent << "sensor_type[]" << std::endl;
    for (size_t i = 0; i < v.sensor_type.size(); ++i)
    {
      s << indent << "  sensor_type[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.sensor_type[i]);
    }
    s << indent << "sensor_coupling[]" << std::endl;
    for (size_t i = 0; i < v.sensor_coupling.size(); ++i)
    {
      s << indent << "  sensor_coupling[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.sensor_coupling[i]);
    }
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "acceleration: ";
    Printer<float>::stream(s, indent + "  ", v.acceleration);
    s << indent << "pan_position_left: ";
    Printer<float>::stream(s, indent + "  ", v.pan_position_left);
    s << indent << "pan_position_right: ";
    Printer<float>::stream(s, indent + "  ", v.pan_position_right);
    s << indent << "pan_position_left_angle_degrees: ";
    Printer<float>::stream(s, indent + "  ", v.pan_position_left_angle_degrees);
    s << indent << "pan_position_right_angle_degrees: ";
    Printer<float>::stream(s, indent + "  ", v.pan_position_right_angle_degrees);
    s << indent << "tilt_position_up: ";
    Printer<float>::stream(s, indent + "  ", v.tilt_position_up);
    s << indent << "tilt_position_down: ";
    Printer<float>::stream(s, indent + "  ", v.tilt_position_down);
    s << indent << "tilt_position_up_angle_degrees: ";
    Printer<float>::stream(s, indent + "  ", v.tilt_position_up_angle_degrees);
    s << indent << "tilt_position_down_angle_degrees: ";
    Printer<float>::stream(s, indent + "  ", v.tilt_position_down_angle_degrees);
    s << indent << "tilt_steps: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tilt_steps);
    s << indent << "cycle_time_sec: ";
    Printer<float>::stream(s, indent + "  ", v.cycle_time_sec);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PHIDGETS_MESSAGE_LIDAR_CONTROLREQUEST_H
